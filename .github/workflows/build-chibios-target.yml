name: Devcontainer build for ChibiOS targets

on:
  push:
  pull_request:
  release:
    types:
      - created
  workflow_dispatch:

jobs:
  build-target:
    strategy:
      fail-fast: false # continues to run other targets in the matrix, even if one fails.
      matrix:
        # Note that the F091RC debug build is currently broken.
        target: [ST_STM32F769I_DISCOVERY, ORGPAL_PALTHREE] #, ST_STM32F429I_DISCOVERY, ST_NUCLEO64_F091RC]
        build-type: [MinSizeRel, Debug] # , RTM]

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup ubuntu
        run: |
          sudo apt-get update
          sudo apt-get install -y

      - name: Setup config
        run: |
            # Apply config templates
            pushd config
            mv user-prefs.TEMPLATE.json user-prefs.json
            mv user-tools-repos.TEMPLATE.json user-tools-repos.json
            sed -i -- 's|"name": "user-tools-repos-container"|"name": "user-tools-repos"|g' user-tools-repos.json
            popd

            # required fixes for current devcontainer
            pushd .devcontainer
            # target the chibios container for a quicker build
            # sed -i -- 's|"dockerFile": "Dockerfile.All"|"dockerFile": "Dockerfile.ChibiOS"|g' devcontainer.json
            # But we actually require a change to it, so we target the source (which takes a little longer).
            sed -i -- 's|"dockerFile": "Dockerfile.All"|"dockerFile": "sources/Dockerfile.ChibiOS"|g' devcontainer.json
            # remove unsupported commands
            # sed -i -- 's|"source=/var/run/docker.sock,target=/var/run/docker.sock,type=bind",|//"source=/var/run/docker.sock,target=/var/run/docker.sock,type=bind",|g' devcontainer.json
            sed -i -- 's|"source=${env:HOME}${env:USERPROFILE}/.azure,target=/home/vscode/.azure,type=bind"|//"source=${env:HOME}${env:USERPROFILE}/.azure,target=/home/vscode/.azure,type=bind",|g' devcontainer.json
            popd

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build ${{ matrix.target }} ${{ matrix.build-type }} Firmware
        uses: devcontainers/ci@v0.3
        with:
          # The ChibiOS container
          cacheFrom: ghcr.io/nanoframework/dev-container-chibios
          push: never
          runCmd: |
            # Build target:
            cmake --preset=${{ matrix.target }} -DCMAKE_BUILD_TYPE=${{ matrix.build-type }}
            cmake --build build

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: Firmware ${{ matrix.target }} ${{ matrix.build-type }}
          path: |
            ./build/*.map
            ./build/*.elf
            ./build/*.hex
            ./build/*.bin
            ./build/*.dfu

      # - name: Delete rolling-pre-release tag and release
      #   uses: dev-drprasad/delete-tag-and-release@v1.0
      #   if: github.ref == 'refs/heads/pre-release'
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     tag_name: rolling-pre-release
      #   continue-on-error: true

      # # Adds a rolling pre-release so that users do not need to be logged in to download the latest firmware.
      # - name: Upload rolling pre-release
      #   uses: softprops/action-gh-release@v0.1.15
      #   if: github.ref == 'refs/heads/pre-release'
      #   with:
      #     name: Rolling pre-release Firmware ${{ matrix.target }} ${{ matrix.build-type }}
      #     body: Rolling pre-release built from latest commit on `pre-release` branch.
      #     tag_name: rolling-pre-release
      #     files: |
      #       ./build/*.map
      #       ./build/*.elf
      #       ./build/*.hex
      #       ./build/*.bin
      #       ./build/*.dfu
      #   continue-on-error: true
