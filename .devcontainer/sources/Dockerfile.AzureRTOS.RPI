FROM ubuntu:latest AS downloader
RUN apt-get update \
    && apt-get -y install --no-install-recommends apt-utils \
    && apt-get install -y \
    curl \
    xz-utils \
    unzip \
    wget 

ARG GCC_URI=https://armkeil.blob.core.windows.net/developer/Files/downloads/gnu/12.3.rel1/binrel/arm-gnu-toolchain-12.3.rel1-x86_64-arm-none-eabi.tar.xz
RUN mkdir -p /tmp/dc-downloads /tmp/dc-extracted/gcc \
    && curl -o /tmp/dc-downloads/gcc-arm.tar.xz  $GCC_URI \
    && xz -d /tmp/dc-downloads/gcc-arm.tar.xz \
    && tar -xvf /tmp/dc-downloads/gcc-arm.tar -C /tmp/dc-extracted/gcc --strip-components 1 \
    && rm -rf /tmp/dc-extracted/gcc/share/doc/ /tmp/dc-extracted/gcc/share/gcc-arm-none-eabi/samples/

ARG CMAKE_SCRIPT=https://github.com/Kitware/CMake/releases/download/v3.27.6/cmake-3.27.6-linux-x86_64.sh
RUN wget $CMAKE_SCRIPT \
      -q -O /tmp/cmake-install.sh \
      && chmod u+x /tmp/cmake-install.sh \
      && mkdir /tmp/dc-extracted/cmake \
      && /tmp/cmake-install.sh --skip-license --prefix=/tmp/dc-extracted/cmake \
      && rm /tmp/cmake-install.sh

FROM ubuntu:latest AS devcontainer

# Avoid warnings by switching to noninteractive
ENV DEBIAN_FRONTEND=noninteractive

# Configure apt and install packages
RUN apt-get update \
    && apt-get -y install --no-install-recommends apt-utils dialog icu-devtools 2>&1 \
    && apt-get install -y \
    git \
    clang-format \
    curl \
    ninja-build \
    srecord

# Create needed directories
RUN mkdir -p /usr/local/bin/gcc

# Clone repos AzureRTOS
RUN git clone --branch v6.2.0_rel --recursive https://github.com/azure-rtos/threadx.git --depth 1 ./sources/AzureRTOS \
    && git clone --branch v6.2.0_rel --recursive https://github.com/azure-rtos/netxduo.git --depth 1 ./sources/NetxDuo

# set gcc location
ENV ARM_GCC_PATH=/usr/local/bin/gcc
ENV PATH=$ARM_GCC_PATH/bin:${PATH}

# Copy from our other container
COPY --from=downloader /tmp/dc-extracted/gcc $ARM_GCC_PATH
COPY --from=downloader /tmp/dc-extracted/cmake /usr/bin/cmake

ENV PATH=/usr/bin/cmake/bin:${PATH}
    
# Install Raspberry Pi Pico SDK
ENV LIBUSB_INCLUDE_DIR="/usr/include/libusb-1.0"

RUN apt-get update \
    && apt-get install -y --no-install-recommends \
    libnewlib-arm-none-eabi libstdc++-arm-none-eabi-newlib gcc g++ \
    python3 pkg-config gdb-multiarch automake autoconf build-essential \
    texinfo libtool libftdi-dev libusb-1.0-0-dev libhidapi-dev wget ca-certificates
            

RUN mkdir -p /pico
RUN git clone -b master https://github.com/raspberrypi/pico-sdk.git ./pico/pico-sdk

WORKDIR /pico/pico-sdk
RUN git submodule update --init

ENV PICO_SDK_PATH="/pico/pico-sdk"

RUN git clone https://github.com/raspberrypi/openocd.git --depth=1 --recurse-submodules \
    && cd openocd && ./bootstrap && ./configure --enable-ftdi --enable-sysfsgpio --enable-picoprobe --enable-cmsis-dap && make -j 8 install 

RUN git clone https://github.com/raspberrypi/picotool.git --depth=1 \
    && cd picotool && mkdir build && cd build && cmake ../ && make -j 8 && cp picotool /usr/local/bin

RUN git clone https://github.com/wtarreau/bootterm.git --depth=1 \
    && cd bootterm && make -j 8 install 

# Clean up downloaded files
RUN apt-get autoremove -y \
    && apt-get clean -y \
    && rm -rf /var/lib/apt/lists/*

# Switch back to dialog for any ad-hoc use of apt-get
ENV DEBIAN_FRONTEND=dialog
